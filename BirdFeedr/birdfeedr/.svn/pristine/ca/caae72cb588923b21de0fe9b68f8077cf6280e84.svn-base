import java.net.URL;
import java.util.ResourceBundle;
import java.util.ArrayList;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.ListView;
import javafx.scene.control.Label;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.stage.Stage;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;


/**
 * Used by the FXMLDocument to control the GUI elements
 * 
 * @author Miguel Roman-Roman
 * @author Wei Huang
 * @author Di Tran
 * @author Josh Gillham
 * @author Nathan Witt
 * @author Thomas Macari
 */
public class FXMLDocumentController implements Initializable {

    //The ui elements to access and manipulate from the javafx display
    @FXML
    private Stage stage;
    @FXML
    private ListView list;
    @FXML
    private Label titleLabel;
    @FXML
    private Label descriptionLabel;
    @FXML
    private Label examplesLabel;
    @FXML
    private TextArea textArea;
    @FXML
    private Button submitButton;
    

    /**
     * Called whenever a button or menu item is pressed, and calls a function
     * depending on the button/item pressed.
     *
     * @param event the calling event
     */
    @FXML
    private void handleButtonAction(ActionEvent event) {
        System.out.println("Event: " + event.getSource());
       
    }

    /**
     * Used to initialize the GUI
     *
     * @param url unused
     * @param rb unused
     */
    @Override
    public void initialize(URL url, ResourceBundle rb) {
        
        ObservableList<String> items = FXCollections.observableArrayList();
        items.setAll(getExercises());
       
        list.setItems(items);   
        
        list.getSelectionModel().selectedItemProperty().addListener(
            new ChangeListener<String>() {
                public void changed(ObservableValue<? extends String> ov, String old_val, 
                                String new_val) 
                {
                    titleLabel.setText(new_val);
                    descriptionLabel.setText(new_val);
                    examplesLabel.setText(new_val);
                }    
            });
       
    }    
    
    /**
     * Returns an arraylist of all available exercises.
     * 
     * @return The list of exercises
     */
    private ArrayList<String> getExercises() {
        ArrayList<String> exercises =  new ArrayList<String>(25);
        
        //temporary
        for(int i = 0; i < 25; i++) {
            exercises.add(i + "");
        }
        
        return exercises;
    }
}
