import java.net.URL;
import java.util.ResourceBundle;
import java.util.ArrayList;

import javax.swing.JOptionPane;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.ListView;
import javafx.scene.control.Label;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.stage.Stage;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.stage.Window;


/**
 * Used by the FXMLDocument to control the GUI elements
 * 
 * @author Miguel Roman-Roman
 * @author Wei Huang
 * @author Di Tran
 * @author Josh Gillham
 * @author Nathan Witt
 * @author Thomas Macari
 */
public class FXMLDocumentController implements Initializable {

    //The ui elements to access and manipulate from the javafx display
    @FXML
    private Stage stage;
    @FXML
    private ListView<Exercise> list;
    @FXML
    private Label titleLabel;
    @FXML
    private Label descriptionLabel;
    @FXML
    private Label examplesLabel;
    //@FXML
    //private TextArea textArea;
    @FXML
    private Button submitButton;
    private Exercise exercise;
    

    /**
     * Called whenever a button or menu item is pressed, and calls a function
     * depending on the button/item pressed.
     *
     * @param event the calling event
     */
    @FXML
    private void handleButtonAction(ActionEvent event) {
        if(event.getSource().equals(submitButton)){
        	JOptionPane.showMessageDialog(null, "Compiles!");
        	//should load current exercise and hide gui
        	StateManager.currentExercise = exercise;	
        }
    }

    /**
     * Used to initialize the GUI
     *
     * @param url unused
     * @param rb unused
     */
    @SuppressWarnings("restriction")
	@Override
    public void initialize(URL url, ResourceBundle rb) {
        
        ObservableList<Exercise> items = FXCollections.observableArrayList();
        items.setAll(getExercises());
       
        list.setItems(items);   
        
      /*
        list.getSelectionModel().selectedItemProperty().addListener(
            new ChangeListener<String>() {
                public void changed(ObservableValue<? extends String> ov, String old_val, 
                                String new_val) 
                {
                    titleLabel.setText(new_val);
                    descriptionLabel.setText(new_val);
                    examplesLabel.setText(new_val);
                    textArea.clear();
                    //Might want to add save feature later on here.
                }    
            });
       */
       list.getSelectionModel().selectedItemProperty().addListener(
            new ChangeListener<Exercise>() {
                public void changed(ObservableValue<? extends Exercise> ov, Exercise old_val, 
                                Exercise new_val) 
                {
                	exercise = new_val;
                    titleLabel.setText(new_val.title);
                    descriptionLabel.setText(new_val.description);
                    examplesLabel.setText(new_val.examples);
                    //textArea.clear();
                    //Might want to add save feature later on here.
                }    
            });
      
    }    

     /**
     * Returns an arraylist of all available exercises.
     * 
     * @return The list of exercises
     */
    private ArrayList<Exercise> getExercises() {
        ArrayList<Exercise> exercises =  new ArrayList<Exercise>(25);
        String desc = "", ex = "";
        for(int i = 0; i < 300; i++) {
            desc = desc + "z";
            ex = ex + "a";
        }
        //temporary
        exercises.add(new Exercise("Fib" , desc, ex));
        for(int i = 1; i < 25; i++) {
            exercises.add(new Exercise("Exercise: " + i, "desc", "example"));
        }
        
        return exercises;
    }
       
    /*
    private ArrayList<String> getExercises2() {
        ArrayList<String> exercises =  new ArrayList<String>(25);
        
        //temporary
        for(int i = 0; i < 25; i++) {
            exercises.add("Exercise: " + i);
        }
        
        return exercises;
    }
    */
}
