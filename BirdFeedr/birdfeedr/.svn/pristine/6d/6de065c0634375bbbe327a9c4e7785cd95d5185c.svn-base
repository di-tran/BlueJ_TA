<?xml version="1.0" encoding="UTF-8"?>
<exercise>
    <title>Permutations Exercise</title>
    <description>
        Complete the perm method within the Permutations class to 
        calculate the permutation of any number n choose r.
    </description>
    <example>
        <example1> 
            perm(5, 3) = 60
        </example1>
        <example2> 
            perm(7, 1) = 7
        </example2>
        <example3> 
            perm(11, 2) = 110
        </example3>
    </example>
    <hint>
        Recursion might be a good approach to solving this problem in a simple way.
    </hint>
    <sampleAnswer>
        public int perm(int n, int r) {
            if (r > 0) {
                return n * perm(n - 1, r - 1);
            }
            return 1;
        }
    </sampleAnswer>
    <javaName>Permutations</javaName>
    <javaCode>
        public class Permutations {
 
            public int perm(int n, int r){
                return -1;
            }

        }
    </javaCode>
    <junitName>PermutationTest</junitName>
    <junitCode>
        import org.junit.*;
        import static org.junit.Assert.*;

        public class PermutationTest {
   
            static Permutations userPerm = new Permutations();
    
            @Test
            public void permutationTest(){
                assertPerm(5, 3);
                assertPerm(10, 2);
                assertPerm(7, 1);
            }
    
            private static void assertPerm(int n, int r){
                int up = userPerm.perm(n, r);
                int tp = perm(n, r);
                assertEquals(&quot;perm(&quot;+ n +&quot;, &quot;+ r +&quot;) was suppost to equal &quot;+ tp +&quot;, but got &quot;+ up +&quot; instead.&quot;, up, tp);
            }
    
            private int perm(int n, int r) {
                if (r > 0) {
                    return n * perm(n - 1, r - 1);
                }
                return 1;
            }
        }   
    </junitCode>
</exercise>
